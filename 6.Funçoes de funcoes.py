# -*- coding: utf-8 -*-
"""Exercícios com cleto - 18/10 - 20/10

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZfiTtT_99GuhD7x_dNTOUP_xPK3W6eB9

1) Faça um código que faça a subtracao entre elementos de diferentes listas e eleve esse resultado ao quadrado .

exemplo:

<center>

|listas  | 0 | 1 | 2 | 
--- | --- | --- | --- |
lista1| 3 | 5 | 15 
lista2 | 4 | 4 | 10
diferença | -1 | 1 | 5
quadrado da diferença | 1 | 1 | 25

</center>

- sugestão: utilize a função map()
"""

#forma correta
def subtracao(x,y):
  return (x-y) ** 2

lista = [3,5,15]
lista_2 = [4,4,10]

list(map(subtracao,lista,lista_2))

#outra forma com for porém acima fica mais correto
def subtracao_listas(lista1,lista2):

  nova_lista = []

  for element in range(len(lista1)):
    nova_lista.append((lista1[element] - lista2[element])**2)
  return nova_lista

subtracao_listas([1,2,3],[0,2,1])

"""2) Escreva um código que recebe uma tupla ou lista e retorna os elementos que têm uma vogal

sugestão: utilize a função filter()
"""

def temvogal (conteudo):
  vogais = ["a","e","i","o","u"]
  
  for letra in vogais:
    if letra in conteudo:
      return True
    else:
      return False
  
lista = ["abacaxi","cxp","lucas","prt","tatu","clt"]
resposta = list(filter(temvogal,lista))

resposta

"""3) Faça um código que retorne a multiplicacao entre todos os elementos da lista

sugestão: utilize a função reduce()
"""

from functools import reduce

def subtracao(x,y):
  return x-y

ba = reduce(subtracao,[5,2,1])

ba

"""4) Faça uma função que sempre some 3 valores e retorne o total de sua soma"""

def soma_tres(a,b,c):
  return a + b + c

soma_tres(1,2,3)

"""5) Agora faça uma função que pode receber múltiplos argumentos e retorne o total de sua soma"""

def soma(*numeros):
  
  somatorio = 0
  for n in numeros:
    somatorio += n
  return somatorio

soma(1,2,5,8,8,7,5)

"""6) Faça uma função que recebe uma quantidade arbitrária de variáveis de qualquer tipo e retorna uma string contendo todas as suas representações separadas por espaço"""

#Função Join
myTuple = ("John", "Peter", "Vicky")

x = "#".join(myTuple)

print(x)

palavras = ("bom dia,","tudo","bem","?","24")

juncao = " ".join(palavras)

juncao

#type(juncao)

#resposta certa
def juntar (*conteudo):
  x = " ".join(map(str,conteudo))
  return x
  
juntar("Oi","bom","dia",32)

"""7) Modifique a função anterior para incluir um parâmetro opcional indicando o caractere de separação entre as variáveis. Seu valor padrão será 1 espaço em branco"""

def juntar (*conteudo, opcional = " "):
  x = opcional.join(map(str,conteudo))
  return x

juntar("Oi","bom","dia",32,"!!")

"""8) Faça uma função que quando o valor do argumento:

for divisível por 3 retornar "Fizz"

for divisível por 5 retornar "Buzz"

for divisível por 3 e por 5 retornar "FizzBuzz"

não for divisível por 3 nem por 5 retorne o valor que foi inserido
"""

def divisao (argumento):
  if argumento % 3 == 0 and argumento % 5 == 0:
    return "FizzBuzz"
  elif argumento % 5 == 0:
    return "Buzz"
  elif argumento % 3 == 0:
    return "Fizz"
  else:
    return "Valor incorreto para função"
  
divisao(6)

"""9) Faca uma função que diga "Olá usuário" se nada for passado como argumento. Caso contrário a função dirá Olá e o nome da pesso"""

def boasvindas (nome = "usuário"):
  return "Olá " + nome

boasvindas()

"""10) criar uma função que consiga registrar dados sobre animais.

  tenha um parâmetro obrigatorio para identificar o animal (ex: gato, cachorro, etc.)

  tenha um parâmetro país com padrão Brasil

aceite através de múltiplos argumentos características desse animal (ex:quantidade_asas, raca, etc)

retornar um texto que contenha o valores que foram inputadas em animal, país e:

  caso tenha alguma outra característica extra: também retorna no texto a quantidade de características (argumentos) que foram registrados e seus nomes.

  caso não tenha característica extra mencionar no texto de retorno




"""

def registroanimal (animal, pais="Brasil", **caracteristicas):
  registro = (f"O animal {animal} foi registrado no país: {pais}.")

  if caracteristicas:
    registro += (f" Houve a adição de {str(len(caracteristicas))} características:{', '.join(caracteristicas.keys())}")
  else:
    registro += " Não houve adição de novas caracteristicas"

  return registro

registroanimal("peixe agulha", pais="brasil")
